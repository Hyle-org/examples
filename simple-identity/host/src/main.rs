use anyhow::Result;
use clap::{Parser, Subcommand};
use client_sdk::helpers::risc0::Risc0Prover;
use contract_identity::IdentityAction;
use contract_identity::IdentityContractState;
use sdk::api::APIRegisterContract;
use sdk::BlobTransaction;
use sdk::ProofTransaction;
use sdk::{Calldata, ZkContract};

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods_identity::{GUEST_ELF, GUEST_ID};

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
#[command(propagate_version = true)]
struct Cli {
    #[command(subcommand)]
    command: Commands,

    #[arg(long, default_value = "http://localhost:4321")]
    pub host: String,

    #[arg(long, default_value = "counter")]
    pub contract_name: String,
}

#[derive(Subcommand)]
enum Commands {
    RegisterContract {},
    RegisterIdentity {
        identity: String,
        password: String,
    },
    VerifyIdentity {
        identity: String,
        password: String,
        nonce: u32,
    },
}

#[tokio::main]
async fn main() -> Result<()> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let cli = Cli::parse();

    // Client to send requests to the node
    let client = client_sdk::rest_client::NodeApiHttpClient::new(cli.host)?;
    let contract_name = &cli.contract_name;

    // Will be used to generate zkProof of the execution.
    let prover = Risc0Prover::new(GUEST_ELF);

    match cli.command {
        Commands::RegisterContract {} => {
            // Build initial state of contract
            let initial_state = IdentityContractState::new();
            println!("Initial state: {:?}", initial_state);

            // Send the transaction to register the contract
            let res = client
                .register_contract(&APIRegisterContract {
                    verifier: "risc0-1".into(),
                    program_id: sdk::ProgramId(sdk::to_u8_array(&GUEST_ID).to_vec()),
                    state_commitment: initial_state.commit(),
                    contract_name: contract_name.clone().into(),
                })
                .await?;
            println!("âœ… Register contract tx sent. Tx hash: {}", res);
        }
        Commands::RegisterIdentity { identity, password } => {
            // Fetch the initial state from the node
            let initial_state: IdentityContractState = client
                .get_contract(&contract_name.clone().into())
                .await
                .unwrap()
                .state
                .into();

            println!("Initial state {:?}", initial_state.clone());
            println!("Identity {:?}", identity.clone());
            // ----
            // Build the blob transaction
            // ----

            let action = IdentityAction::RegisterIdentity {
                account: identity.clone(),
            };
            let blobs = vec![sdk::Blob {
                contract_name: contract_name.clone().into(),
                data: sdk::BlobData(borsh::to_vec(&action).expect("failed to encode BlobData")),
            }];
            let blob_tx = BlobTransaction::new(identity.clone(), blobs.clone());

            // Send the blob transaction
            let blob_tx_hash = client.send_tx_blob(&blob_tx).await.unwrap();
            println!("âœ… Blob tx sent. Tx hash: {}", blob_tx_hash);

            // ----
            // Prove the state transition
            // ----

            let identity = blob_tx.identity.clone();

            // Build the contract input
            let inputs = Calldata {
                identity: identity.clone().into(),
                tx_hash: blob_tx_hash,
                private_input: password.into_bytes().to_vec(),
                tx_ctx: None,
                blobs: blobs.clone().into(),
                index: sdk::BlobIndex(0),
                tx_blob_count: blobs.len(),
            };
            let (program_outputs, _, _) = initial_state.clone().execute(&inputs).unwrap();
            println!("ðŸš€ Executed: {}", program_outputs);

            // Generate the zk proof
            let proof = prover
                .prove(initial_state.as_bytes().unwrap(), inputs)
                .await
                .unwrap();

            // Build the Proof transaction
            let proof_tx = ProofTransaction {
                proof,
                contract_name: contract_name.clone().into(),
            };

            // Send the proof transaction
            let proof_tx_hash = client.send_tx_proof(&proof_tx).await.unwrap();
            println!("âœ… Proof tx sent. Tx hash: {}", proof_tx_hash);
        }
        Commands::VerifyIdentity {
            identity,
            password,
            nonce,
        } => {
            {
                // Fetch the initial state from the node
                let initial_state: IdentityContractState = client
                    .get_contract(&contract_name.clone().into())
                    .await
                    .unwrap()
                    .state
                    .into();
                // ----
                // Build the blob transaction
                // ----

                let action = IdentityAction::VerifyIdentity {
                    account: identity.clone(),
                    nonce,
                };
                let blobs = vec![sdk::Blob {
                    contract_name: contract_name.clone().into(),
                    data: sdk::BlobData(borsh::to_vec(&action).expect("failed to encode BlobData")),
                }];
                let blob_tx = BlobTransaction::new(identity, blobs.clone());

                // Send the blob transaction
                let blob_tx_hash = client.send_tx_blob(&blob_tx).await.unwrap();
                println!("âœ… Blob tx sent. Tx hash: {}", blob_tx_hash);

                // ----
                // Prove the state transition
                // ----

                // Build the contract input
                let inputs = Calldata {
                    identity: blob_tx.identity.clone(),
                    tx_hash: blob_tx_hash.clone(),
                    private_input: password.into_bytes().to_vec(),
                    tx_ctx: None,
                    blobs: blobs.clone().into(),
                    tx_blob_count: blobs.len(),
                    index: sdk::BlobIndex(0),
                };

                // Generate the zk proof
                let proof = prover.prove(initial_state.commit(), inputs).await.unwrap();

                let proof_tx = ProofTransaction {
                    proof,
                    contract_name: contract_name.clone().into(),
                };

                // Send the proof transaction
                let proof_tx_hash = client.send_tx_proof(&proof_tx).await.unwrap();
                println!("âœ… Proof tx sent. Tx hash: {}", proof_tx_hash);
            }
        }
    };
    Ok(())
}
